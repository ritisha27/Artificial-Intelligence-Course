# -*- coding: utf-8 -*-
"""AI_A3_MT22056

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f3I3l11AbynfzKcqBngOXMZPAwNmAagq
"""

pip install durable-rules

# importing libraries
from durable.lang import *
from durable.lang import ruleset, when_all, m, post, _main_host

if _main_host is not None:
    _main_host._ruleset_directory.clear()

# based on inputs by user
with ruleset('recommend'):

  #for CSE branch + higher studies
  @when_all((m.field == 'CSE') & (m.cg>=8.0) & (m.goal == 'HS'))
  def func(c):
        c.assert_fact('suggestion_HS', {'suggest': 'HigherStudies'})
        c.assert_fact('suggestion_institute',{'suggest_institute': 'higher-cg-hs'})

  @when_all((m.field == 'CSE') & (m.cg<8.0) & (m.goal == 'HS'))
  def func(c):
        c.assert_fact('suggestion_HS', {'suggest': 'HigherStudies'})
        c.assert_fact('suggestion_institute',{'suggest_institute': 'lower-cg-hs'})


  #for CSE branch + job
  @when_all((m.field == 'CSE') & (m.cg>=8.0) & (m.goal == 'JOB'))
  def func(c):
        c.assert_fact('suggestion_Jobs', {'suggest': 'cse-jobs'})
        c.assert_fact('suggestion_companies',{'suggest_company': 'cse-companies'})

  @when_all((m.field == 'CSE') & (m.cg<8.0) & (m.goal == 'JOB'))
  def func(c):
        c.assert_fact('suggestion_Jobs', {'suggest': 'cse-jobs'})
        c.assert_fact('suggestion_companies',{'suggest_company': 'cse-companies'})


  #for ECE branch + higher studies
  @when_all((m.field == 'ECE') & (m.cg>=8.0) & (m.goal == 'HS'))
  def func(c):
        c.assert_fact('suggestion_HS', {'suggest': 'HigherStudies'})
        c.assert_fact('suggestion_institute',{'suggest_institute': 'higher-cg-hs'})

  @when_all((m.field == 'ECE') & (m.cg<8.0) & (m.goal == 'HS'))
  def func(c):
        c.assert_fact('suggestion_HS', {'suggest': 'HigherStudies'})
        c.assert_fact('suggestion_institute',{'suggest_institute': 'lower-cg-hs'})


  #for ECE branch + job
  @when_all((m.field == 'ECE') & (m.cg>=8.0) & (m.goal == 'JOB'))
  def func(c):
        c.assert_fact('suggestion_Jobs', {'suggest': 'ece-jobs'})
        c.assert_fact('suggestion_companies',{'suggest_company': 'ece-companies'})

  @when_all((m.field == 'ECE') & (m.cg<8.0) & (m.goal == 'JOB'))
  def func(c):
        c.assert_fact('suggestion_Jobs', {'suggest': 'ece-jobs'})
        c.assert_fact('suggestion_companies',{'suggest_company': 'ece-companies'})


  
  #for CB branch + higher studies
  @when_all((m.field == 'CB') & (m.cg>=8.0) & (m.goal == 'HS'))
  def func(c):
        c.assert_fact('suggestion_HS', {'suggest': 'HigherStudies'})
        c.assert_fact('suggestion_institute',{'suggest_institute': 'cb-higher-cg-hs'})

  @when_all((m.field == 'CB') & (m.cg<8.0) & (m.goal == 'HS'))
  def func(c):
        c.assert_fact('suggestion_HS', {'suggest': 'HigherStudies'})
        c.assert_fact('suggestion_institute',{'suggest_institute': 'cb-lower-cg-hs'})


  #for CB branch + job
  @when_all((m.field == 'CB') & (m.cg>=8.0) & (m.goal == 'JOB'))
  def func(c):
        c.assert_fact('suggestion_Jobs', {'suggest': 'cb-jobs'})
        c.assert_fact('suggestion_companies',{'suggest_company': 'cb-companies'})

  @when_all((m.field == 'CB') & (m.cg<8.0) & (m.goal == 'JOB'))
  def func(c):
        c.assert_fact('suggestion_Jobs', {'suggest': 'cb-jobs'})
        c.assert_fact('suggestion_companies',{'suggest_company': 'cb-companies'})


#ruleset for higher studies     
with ruleset('suggestion_HS'):
    @when_all((m.suggest == 'HigherStudies'))
    def mathc(d):
        d.assert_fact({ 'advice': '- PHD' })
        d.assert_fact({ 'advice': '- MS Abrod' })
        d.assert_fact({ 'advice': '- Research' })
        d.assert_fact({ 'advice': 'For Higher Studies, you can opt either of the options:' })

    @when_all(+m.advice)
    def output(d):
        print(d.m.advice)


#ruleset for institute suggestion.
with ruleset('suggestion_institute'):
    @when_all((m.suggest_institute == 'higher-cg-hs'))
    def mathc(d):
        d.assert_fact({ 'advice': '- IITs, IIITs..' })
        d.assert_fact({ 'advice': '- MIT, Stanford, Harvard..' })
        d.assert_fact({ 'advice': '- IISC Banglore, IIIT Delhi..' })
        d.assert_fact({ 'advice': '\nThe top Institutions you can opt:' })

    @when_all((m.suggest_institute == 'lower-cg-hs'))
    def mathc(d):
        d.assert_fact({ 'advice': '- BITS, VIT Vellore, Thappar..' })
        d.assert_fact({ 'advice': '- Mcgill, Waterloo, Carleton, Queens Mary University...' })
        d.assert_fact({ 'advice': '- IIST Shibpur..' })
        d.assert_fact({ 'advice': '\nThe top Institutions you can opt:' })

    @when_all((m.suggest_institute == 'cb-higher-cg-hs'))
    def mathc(d):
        d.assert_fact({ 'advice': '- IIITD, University of Hyderabad, Indian Institute of Science, Banglore..' })
        d.assert_fact({ 'advice': '- The University of Queensland, The State University of New York,George Mason University..' })
        d.assert_fact({ 'advice': '\nThe top Institutions you can opt:' })

    @when_all((m.suggest_institute == 'cb-lower-cg-hs'))
    def mathc(d):
        d.assert_fact({ 'advice': '- Amity Institute of Biotechnology, Noida; University School of Biotechnology, Dwarka, New Delhi..' })
        d.assert_fact({ 'advice': '- National University of Singapore,The University of Melbourne..' })
        d.assert_fact({ 'advice': '\nThe top Institutions you can opt:' })
      
    @when_all(+m.advice)
    def output(d):
        print(d.m.advice)


#rule set for jobs suggestion
with ruleset('suggestion_Jobs'):
    @when_all((m.suggest == 'cse-jobs'))
    def mathc(d):
        d.assert_fact({ 'advice': '- Web Developer' })
        d.assert_fact({ 'advice': '- Android Developer' })
        d.assert_fact({ 'advice': '- Data Scientist' })
        d.assert_fact({ 'advice': '- Business Analyst' })
        d.assert_fact({ 'advice': '- Data Engineer' })
        d.assert_fact({ 'advice': '- SDE (Software Development Engineer' })
        d.assert_fact({ 'advice': 'Jobs roles you can apply for:' })
    
    @when_all((m.suggest == 'ece-jobs'))
    def mathc(d):
        d.assert_fact({ 'advice': '- Electronic Design Engineer' })
        d.assert_fact({ 'advice': '- PCB Designer' })
        d.assert_fact({ 'advice': '- Hardware/IOT Engineer' })
        d.assert_fact({ 'advice': '- VLSI Design Engineer' })
        d.assert_fact({ 'advice': 'Jobs roles you can apply for:' })

    @when_all((m.suggest == 'cb-jobs'))
    def mathc(d):
        d.assert_fact({ 'advice': '- Bioinformatics Engineer' })
        d.assert_fact({ 'advice': '- Biophysicists' })
        d.assert_fact({ 'advice': '- Medical Scientists' })
        d.assert_fact({ 'advice': 'Jobs roles you can apply for:' })


    @when_all(+m.advice)
    def output(d):
        print(d.m.advice)


#ruleset for company suggestions.
with ruleset('suggestion_companies'):
    @when_all((m.suggest_company == 'cse-companies'))
    def mathc(d):
        d.assert_fact({ 'advice': '- Infosys, TCS, Capgemini..' })
        d.assert_fact({ 'advice': '- Dream11, WheelsEye, Adobe, Walmart..' })
        d.assert_fact({ 'advice': '- Google, Facebook, Amazon, Netflix..' })
        d.assert_fact({ 'advice': '\nThe top companies you can apply for:' })

    @when_all((m.suggest_company == 'ece-companies'))
    def mathc(d):
      d.assert_fact({ 'advice': '- Mentor Graphics' })
      d.assert_fact({ 'advice': '- Synopsys' })
      d.assert_fact({ 'advice': '- STM Electronics' })
      d.assert_fact({ 'advice': '- Cisco' })
      d.assert_fact({ 'advice': '\nThe top companies you can apply for:' })

    @when_all((m.suggest_company == 'cb-companies'))
    def mathc(d):
      d.assert_fact({ 'advice': '- MedGenome Labs, Corteva, Kyvor Genomics..' })
      d.assert_fact({ 'advice': '- Astrazencea Pharma , Corteva, E-Merge Tech..' })
      d.assert_fact({ 'advice': '- Cognizant , Jubilant Pharmova Limited..' })
      d.assert_fact({ 'advice': '\nThe top companies you can apply for:' })

    @when_all(+m.advice)
    def output(d):
        print(d.m.advice)

#main function
print("Welcome to Career Advisory System - by IIITD")
print("Please Enter your name.")
name = input()
print('\nHi {}! I am here to help with your career'. format(name))
print("Lets start with asking some Questions.")
print("\n1. Please Enter your branch.")
print("a. CSE\nb. ECE \nc. CB")
branch = input()
print("\n2. Please Enter your current CGPA.")
cgpa = float(input())
print("\n3. What are your future goals?")
print("\na. Looking for job. (Enter JOB) \nb. Thinking to pursue Higher Studies. (Enter HS)")
interest = input()
print('\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n')
print('According to the inputs given, the best results are as follows. ')
assert_fact('recommend',{'field':branch, 'cg':cgpa, 'goal':interest})
print('\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n')

